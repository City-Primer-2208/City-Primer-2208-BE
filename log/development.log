  [1m[35m (2.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  â†³ bin/rails:9
  [1m[35m (1.7ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = $1[0m  [["key", "environment"]]
  â†³ bin/rails:9
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  â†³ bin/rails:9
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = $1[0m  [["key", "environment"]]
  â†³ bin/rails:9
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  â†³ bin/rails:9
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = $1[0m  [["key", "environment"]]
  â†³ bin/rails:9
  [1m[35m (81.6ms)[0m  [1m[35mDROP DATABASE IF EXISTS "DiscoverIt-2208-BE_development"[0m
  â†³ bin/rails:9
  [1m[35m (72.5ms)[0m  [1m[35mDROP DATABASE IF EXISTS "DiscoverIt-2208-BE_test"[0m
  â†³ bin/rails:9
  [1m[35m (182.4ms)[0m  [1m[35mCREATE DATABASE "DiscoverIt-2208-BE_development" ENCODING = 'unicode'[0m
  â†³ bin/rails:9
  [1m[35m (87.4ms)[0m  [1m[35mCREATE DATABASE "DiscoverIt-2208-BE_test" ENCODING = 'unicode'[0m
  â†³ bin/rails:9
  [1m[35m (7.9ms)[0m  [1m[35mCREATE TABLE "schema_migrations" ("version" character varying NOT NULL PRIMARY KEY)[0m
  â†³ bin/rails:9
  [1m[35m (9.6ms)[0m  [1m[35mCREATE TABLE "ar_internal_metadata" ("key" character varying NOT NULL PRIMARY KEY, "value" character varying, "created_at" timestamp NOT NULL, "updated_at" timestamp NOT NULL)[0m
  â†³ bin/rails:9
  [1m[35m (0.8ms)[0m  [1m[34mSELECT pg_try_advisory_lock(5567909666492224275)[0m
  â†³ bin/rails:9
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  â†³ bin/rails:9
Migrating to CreateUsers (20230206041257)
  [1m[35m (0.1ms)[0m  [1m[35mBEGIN[0m
  â†³ bin/rails:9
  [1m[35m (13.1ms)[0m  [1m[35mCREATE TABLE "users" ("id" bigserial primary key, "name" character varying, "email" character varying, "password" character varying, "created_at" timestamp NOT NULL, "updated_at" timestamp NOT NULL)[0m
  â†³ db/migrate/20230206041257_create_users.rb:3
  [1m[36mActiveRecord::SchemaMigration Create (0.5ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ($1) RETURNING "version"[0m  [["version", "20230206041257"]]
  â†³ bin/rails:9
  [1m[35m (3.1ms)[0m  [1m[35mCOMMIT[0m
  â†³ bin/rails:9
Migrating to CreateFavorites (20230206041611)
  [1m[35m (0.3ms)[0m  [1m[35mBEGIN[0m
  â†³ bin/rails:9
  [1m[35m (7.9ms)[0m  [1m[35mCREATE TABLE "favorites" ("id" bigserial primary key, "user_id" bigint, "ninja_id" character varying, "place_name" character varying, "thumbnail_url" character varying, "created_at" timestamp NOT NULL, "updated_at" timestamp NOT NULL, CONSTRAINT "fk_rails_d15744e438"
FOREIGN KEY ("user_id")
  REFERENCES "users" ("id")
)[0m
  â†³ db/migrate/20230206041611_create_favorites.rb:3
  [1m[35m (1.5ms)[0m  [1m[35mCREATE  INDEX  "index_favorites_on_user_id" ON "favorites"  ("user_id")[0m
  â†³ db/migrate/20230206041611_create_favorites.rb:3
  [1m[36mActiveRecord::SchemaMigration Create (2.0ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ($1) RETURNING "version"[0m  [["version", "20230206041611"]]
  â†³ bin/rails:9
  [1m[35m (1.1ms)[0m  [1m[35mCOMMIT[0m
  â†³ bin/rails:9
  [1m[36mActiveRecord::InternalMetadata Load (0.7ms)[0m  [1m[34mSELECT  "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = $1 LIMIT $2[0m  [["key", "environment"], ["LIMIT", 1]]
  â†³ bin/rails:9
  [1m[35m (0.3ms)[0m  [1m[35mBEGIN[0m
  â†³ bin/rails:9
  [1m[36mActiveRecord::InternalMetadata Create (1.0ms)[0m  [1m[32mINSERT INTO "ar_internal_metadata" ("key", "value", "created_at", "updated_at") VALUES ($1, $2, $3, $4) RETURNING "key"[0m  [["key", "environment"], ["value", "development"], ["created_at", "2023-02-07 00:24:44.981558"], ["updated_at", "2023-02-07 00:24:44.981558"]]
  â†³ bin/rails:9
  [1m[35m (0.8ms)[0m  [1m[35mCOMMIT[0m
  â†³ bin/rails:9
  [1m[35m (1.0ms)[0m  [1m[34mSELECT pg_advisory_unlock(5567909666492224275)[0m
  â†³ bin/rails:9
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  â†³ bin/rails:9
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  â†³ bin/rails:9
  [1m[35m (0.2ms)[0m  [1m[35mBEGIN[0m
  â†³ db/seeds.rb:8
  [1m[36mUser Exists (0.4ms)[0m  [1m[34mSELECT  1 AS one FROM "users" WHERE "users"."email" = $1 LIMIT $2[0m  [["email", "ash_ketchup@pokemon.com"], ["LIMIT", 1]]
  â†³ db/seeds.rb:8
  [1m[36mUser Create (2.0ms)[0m  [1m[32mINSERT INTO "users" ("name", "email", "password", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5) RETURNING "id"[0m  [["name", "Ash Ketchup"], ["email", "ash_ketchup@pokemon.com"], ["password", "derpderpderp"], ["created_at", "2023-02-07 00:24:45.050118"], ["updated_at", "2023-02-07 00:24:45.050118"]]
  â†³ db/seeds.rb:8
  [1m[35m (0.3ms)[0m  [1m[35mCOMMIT[0m
  â†³ db/seeds.rb:8
  [1m[35m (0.1ms)[0m  [1m[35mBEGIN[0m
  â†³ db/seeds.rb:9
  [1m[36mUser Exists (0.2ms)[0m  [1m[34mSELECT  1 AS one FROM "users" WHERE "users"."email" = $1 LIMIT $2[0m  [["email", "mega_man@legends.com"], ["LIMIT", 1]]
  â†³ db/seeds.rb:9
  [1m[36mUser Create (0.2ms)[0m  [1m[32mINSERT INTO "users" ("name", "email", "password", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5) RETURNING "id"[0m  [["name", "Mega Man"], ["email", "mega_man@legends.com"], ["password", "whatever"], ["created_at", "2023-02-07 00:24:45.054767"], ["updated_at", "2023-02-07 00:24:45.054767"]]
  â†³ db/seeds.rb:9
  [1m[35m (0.2ms)[0m  [1m[35mCOMMIT[0m
  â†³ db/seeds.rb:9
Started POST "/graphql" for ::1 at 2023-02-06 17:25:23 -0700
  [1m[35m (1.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  â†³ /Users/turingschool/.rbenv/versions/2.7.4/lib/ruby/gems/2.7.0/gems/activerecord-5.2.8.1/lib/active_record/log_subscriber.rb:98
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#  Prettify Query:  Shift-Ctrl-P (or press the prettify button above)\n#\n#     Merge Query:  Shift-Ctrl-M (or press the merge button above)\n#\n#       Run Query:  Ctrl-Enter (or press the play button above)\n#\n#   Auto Complete:  Ctrl-Space (or just start typing)\n#\n{ \n    user(id: \"1\"){name}\n}\n", "variables"=>nil, "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#  Prettify Query:  Shift-Ctrl-P (or press the prettify button above)\n#\n#     Merge Query:  Shift-Ctrl-M (or press the merge button above)\n#\n#       Run Query:  Ctrl-Enter (or press the play button above)\n#\n#   Auto Complete:  Ctrl-Space (or just start typing)\n#\n{ \n    user(id: \"1\"){name}\n}\n", "variables"=>nil}}
  [1m[36mUser Load (0.4ms)[0m  [1m[34mSELECT  "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 1], ["LIMIT", 1]]
  â†³ app/graphql/types/query_type.rb:31
Completed 200 OK in 49ms (Views: 0.2ms | ActiveRecord: 8.7ms)


Started POST "/graphql" for ::1 at 2023-02-06 17:25:28 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#  Prettify Query:  Shift-Ctrl-P (or press the prettify button above)\n#\n#     Merge Query:  Shift-Ctrl-M (or press the merge button above)\n#\n#       Run Query:  Ctrl-Enter (or press the play button above)\n#\n#   Auto Complete:  Ctrl-Space (or just start typing)\n#\n{ \n    user(id: \"2\"){name}\n}\n", "variables"=>nil, "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#  Prettify Query:  Shift-Ctrl-P (or press the prettify button above)\n#\n#     Merge Query:  Shift-Ctrl-M (or press the merge button above)\n#\n#       Run Query:  Ctrl-Enter (or press the play button above)\n#\n#   Auto Complete:  Ctrl-Space (or just start typing)\n#\n{ \n    user(id: \"2\"){name}\n}\n", "variables"=>nil}}
  [1m[36mUser Load (0.6ms)[0m  [1m[34mSELECT  "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  â†³ app/graphql/types/query_type.rb:31
Completed 200 OK in 5ms (Views: 0.2ms | ActiveRecord: 0.6ms)


Started POST "/graphql" for ::1 at 2023-02-06 17:25:37 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#  Prettify Query:  Shift-Ctrl-P (or press the prettify button above)\n#\n#     Merge Query:  Shift-Ctrl-M (or press the merge button above)\n#\n#       Run Query:  Ctrl-Enter (or press the play button above)\n#\n#   Auto Complete:  Ctrl-Space (or just start typing)\n#\n{ \n    user(id: \"2\"){name, email}\n}\n", "variables"=>nil, "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#  Prettify Query:  Shift-Ctrl-P (or press the prettify button above)\n#\n#     Merge Query:  Shift-Ctrl-M (or press the merge button above)\n#\n#       Run Query:  Ctrl-Enter (or press the play button above)\n#\n#   Auto Complete:  Ctrl-Space (or just start typing)\n#\n{ \n    user(id: \"2\"){name, email}\n}\n", "variables"=>nil}}
  [1m[36mUser Load (2.8ms)[0m  [1m[34mSELECT  "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  â†³ app/graphql/types/query_type.rb:31
Completed 200 OK in 6ms (Views: 0.2ms | ActiveRecord: 2.8ms)


Started POST "/graphql" for ::1 at 2023-02-06 17:25:46 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#  Prettify Query:  Shift-Ctrl-P (or press the prettify button above)\n#\n#     Merge Query:  Shift-Ctrl-M (or press the merge button above)\n#\n#       Run Query:  Ctrl-Enter (or press the play button above)\n#\n#   Auto Complete:  Ctrl-Space (or just start typing)\n#\n{ \n    users {\n      id\n    }\n}\n", "variables"=>nil, "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#  Prettify Query:  Shift-Ctrl-P (or press the prettify button above)\n#\n#     Merge Query:  Shift-Ctrl-M (or press the merge button above)\n#\n#       Run Query:  Ctrl-Enter (or press the play button above)\n#\n#   Auto Complete:  Ctrl-Space (or just start typing)\n#\n{ \n    users {\n      id\n    }\n}\n", "variables"=>nil}}
  [1m[36mUser Load (5.5ms)[0m  [1m[34mSELECT "users".* FROM "users"[0m
  â†³ /Users/turingschool/.rbenv/versions/2.7.4/lib/ruby/gems/2.7.0/gems/activerecord-5.2.8.1/lib/active_record/log_subscriber.rb:98
Completed 200 OK in 11ms (Views: 0.2ms | ActiveRecord: 5.5ms)


Started POST "/graphql" for ::1 at 2023-02-06 17:25:53 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#  Prettify Query:  Shift-Ctrl-P (or press the prettify button above)\n#\n#     Merge Query:  Shift-Ctrl-M (or press the merge button above)\n#\n#       Run Query:  Ctrl-Enter (or press the play button above)\n#\n#   Auto Complete:  Ctrl-Space (or just start typing)\n#\n{ \n    users {\n      name\n      id\n    }\n}\n", "variables"=>nil, "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#  Prettify Query:  Shift-Ctrl-P (or press the prettify button above)\n#\n#     Merge Query:  Shift-Ctrl-M (or press the merge button above)\n#\n#       Run Query:  Ctrl-Enter (or press the play button above)\n#\n#   Auto Complete:  Ctrl-Space (or just start typing)\n#\n{ \n    users {\n      name\n      id\n    }\n}\n", "variables"=>nil}}
  [1m[36mUser Load (1.4ms)[0m  [1m[34mSELECT "users".* FROM "users"[0m
  â†³ /Users/turingschool/.rbenv/versions/2.7.4/lib/ruby/gems/2.7.0/gems/activerecord-5.2.8.1/lib/active_record/log_subscriber.rb:98
Completed 200 OK in 4ms (Views: 0.2ms | ActiveRecord: 1.4ms)


Started POST "/graphql" for ::1 at 2023-02-06 17:26:11 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#  Prettify Query:  Shift-Ctrl-P (or press the prettify button above)\n#\n#     Merge Query:  Shift-Ctrl-M (or press the merge button above)\n#\n#       Run Query:  Ctrl-Enter (or press the play button above)\n#\n#   Auto Complete:  Ctrl-Space (or just start typing)\n#\n{ \n    users {\n      id\n      name\n    }\n}\n", "variables"=>nil, "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#  Prettify Query:  Shift-Ctrl-P (or press the prettify button above)\n#\n#     Merge Query:  Shift-Ctrl-M (or press the merge button above)\n#\n#       Run Query:  Ctrl-Enter (or press the play button above)\n#\n#   Auto Complete:  Ctrl-Space (or just start typing)\n#\n{ \n    users {\n      id\n      name\n    }\n}\n", "variables"=>nil}}
  [1m[36mUser Load (1.5ms)[0m  [1m[34mSELECT "users".* FROM "users"[0m
  â†³ /Users/turingschool/.rbenv/versions/2.7.4/lib/ruby/gems/2.7.0/gems/activerecord-5.2.8.1/lib/active_record/log_subscriber.rb:98
Completed 200 OK in 5ms (Views: 0.2ms | ActiveRecord: 1.5ms)


Started OPTIONS "/graphql" for ::1 at 2023-02-06 18:58:15 -0700
  [1m[35m (2.9ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  â†³ /Users/turingschool/.rbenv/versions/2.7.4/lib/ruby/gems/2.7.0/gems/activerecord-5.2.8.1/lib/active_record/log_subscriber.rb:98
  
ActionController::RoutingError (No route matches [OPTIONS] "/graphql"):
  
actionpack (5.2.8.1) lib/action_dispatch/middleware/debug_exceptions.rb:65:in `call'
actionpack (5.2.8.1) lib/action_dispatch/middleware/show_exceptions.rb:33:in `call'
railties (5.2.8.1) lib/rails/rack/logger.rb:38:in `call_app'
railties (5.2.8.1) lib/rails/rack/logger.rb:26:in `block in call'
activesupport (5.2.8.1) lib/active_support/tagged_logging.rb:71:in `block in tagged'
activesupport (5.2.8.1) lib/active_support/tagged_logging.rb:28:in `tagged'
activesupport (5.2.8.1) lib/active_support/tagged_logging.rb:71:in `tagged'
railties (5.2.8.1) lib/rails/rack/logger.rb:26:in `call'
actionpack (5.2.8.1) lib/action_dispatch/middleware/remote_ip.rb:81:in `call'
actionpack (5.2.8.1) lib/action_dispatch/middleware/request_id.rb:27:in `call'
rack (2.2.6.2) lib/rack/runtime.rb:22:in `call'
activesupport (5.2.8.1) lib/active_support/cache/strategy/local_cache_middleware.rb:29:in `call'
actionpack (5.2.8.1) lib/action_dispatch/middleware/executor.rb:14:in `call'
actionpack (5.2.8.1) lib/action_dispatch/middleware/static.rb:127:in `call'
rack (2.2.6.2) lib/rack/sendfile.rb:110:in `call'
webpacker (4.3.0) lib/webpacker/dev_server_proxy.rb:23:in `perform_request'
rack-proxy (0.7.6) lib/rack/proxy.rb:87:in `call'
railties (5.2.8.1) lib/rails/engine.rb:524:in `call'
puma (3.12.6) lib/puma/configuration.rb:227:in `call'
puma (3.12.6) lib/puma/server.rb:706:in `handle_request'
puma (3.12.6) lib/puma/server.rb:476:in `process_client'
puma (3.12.6) lib/puma/server.rb:334:in `block in run'
puma (3.12.6) lib/puma/thread_pool.rb:135:in `block in spawn_thread'
Started POST "/graphql" for ::1 at 2023-02-06 19:02:05 -0700
  [1m[35m (1.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  â†³ /Users/turingschool/.rbenv/versions/2.7.4/lib/ruby/gems/2.7.0/gems/activerecord-5.2.8.1/lib/active_record/log_subscriber.rb:98
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetUsers", "variables"=>{}, "query"=>"query GetUsers {\n  users {\n    id\n    name\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetUsers", "variables"=>{}, "query"=>"query GetUsers {\n  users {\n    id\n    name\n    __typename\n  }\n}"}}
  [1m[36mUser Load (9.4ms)[0m  [1m[34mSELECT "users".* FROM "users"[0m
  â†³ /Users/turingschool/.rbenv/versions/2.7.4/lib/ruby/gems/2.7.0/gems/activerecord-5.2.8.1/lib/active_record/log_subscriber.rb:98
Completed 200 OK in 83ms (Views: 0.3ms | ActiveRecord: 46.0ms)


Started POST "/graphql" for ::1 at 2023-02-06 19:02:46 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetUsers", "variables"=>{}, "query"=>"query GetUsers {\n  users {\n    id\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetUsers", "variables"=>{}, "query"=>"query GetUsers {\n  users {\n    id\n    __typename\n  }\n}"}}
  [1m[36mUser Load (24.6ms)[0m  [1m[34mSELECT "users".* FROM "users"[0m
  â†³ /Users/turingschool/.rbenv/versions/2.7.4/lib/ruby/gems/2.7.0/gems/activerecord-5.2.8.1/lib/active_record/log_subscriber.rb:98
Completed 200 OK in 28ms (Views: 0.2ms | ActiveRecord: 24.6ms)


Started POST "/graphql" for ::1 at 2023-02-06 19:03:17 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetUsers", "variables"=>{}, "query"=>"query GetUsers {\n  user(id: \"1\") {\n    name\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetUsers", "variables"=>{}, "query"=>"query GetUsers {\n  user(id: \"1\") {\n    name\n    __typename\n  }\n}"}}
  [1m[36mUser Load (1.9ms)[0m  [1m[34mSELECT  "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 1], ["LIMIT", 1]]
  â†³ app/graphql/types/query_type.rb:31
Completed 200 OK in 41ms (Views: 0.2ms | ActiveRecord: 2.1ms)


